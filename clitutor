#!/bin/bash



echo " ██████╗██╗     ██╗████████╗██╗   ██╗████████╗ ██████╗ ██████╗ ";
echo "██╔════╝██║     ██║╚══██╔══╝██║   ██║╚══██╔══╝██╔═══██╗██╔══██╗";
echo "██║     ██║     ██║   ██║   ██║   ██║   ██║   ██║   ██║██████╔╝";
echo "██║     ██║     ██║   ██║   ██║   ██║   ██║   ██║   ██║██╔══██╗";
echo "╚██████╗███████╗██║   ██║   ╚██████╔╝   ██║   ╚██████╔╝██║  ██║";
echo " ╚═════╝╚══════╝╚═╝   ╚═╝    ╚═════╝    ╚═╝    ╚═════╝ ╚═╝  ╚═╝";
echo
echo "Welcome to clitutor! Type 'pwd' (without the quotes) below to see where you currently are."
printf "Hint: \e[4mp\e[0mrint \e[4mw\e[0mowrking \e[4md\e[0mirectory - you can think of a directory as the same thing as a folder\n\n"

while true; do
 read -p "\$ " user_input
 if [[ "$user_input" == "pwd" ]]; then
  pwd
  echo
  echo "^^^^^^^"
  echo "Nice! You just printed your current directory."
  echo "Think of this as the folder you’re currently 'in'."
  echo "From here, you can run 'ls' to list the files and directories inside."
  break
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
done

while true; do
 read -p "\$ " user_input
 if [[ "$user_input" == "ls" ]]; then
  ls
  echo
  echo "^^^^^^^"
  echo "Those are the files and folders inside the folder path shown above."
  printf "Hint: \e[4ml\e[0mist \e[4ms\e[0mtorage\n\n"
  break
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
done


while true; do
 read -p "Type 'c' to continue> " user_input
 if [[ "$user_input" == "c" ]]; then
  clear
  printf "From here, you can cd (\e[4mc\e[0mhange \e[4md\e[0mirectory) to other places. Below is a list of examples. The '/' is the root or top of the filesystem. These are known as absolute paths.\n\n"
  echo
  break
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
done

find ~ -maxdepth 3 -not -path '*/.*' 2>/dev/null|head -n 5
find /etc/* -maxdepth 3 -not -path '*/.*' 2>/dev/null|head -n 5

echo 
echo "Type 'cd /' below to change to the root. Then, do an 'ls' there. Then, enter 'cd -' to return here."

while true; do
 read -p "\$ " user_input
 if [[ "$user_input" == "cd /" ]]; then
  cd /
  echo
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
 read -p "\$ " user_input
 if [[ "$user_input" == "ls" ]]; then
  ls
  echo
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
 read -p "\$ " user_input
 if [[ "$user_input" == "cd -" ]]; then
  cd -
  echo
  break
 else
  echo "That’s not quite right. Try typing: pwd"
 fi
done

